{
	"info": {
		"_postman_id": "ab1dfa55-aeb5-4733-b8bc-e9f3f5d34b9a",
		"name": "API Documentation",
		"description": "APIs for this project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37731369"
	},
	"item": [
		{
			"name": "login",
			"item": [
				{
					"name": "Login user and generate JWT token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests for the valid scenario",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response should be JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"",
									"pm.test(\"Check for access_token in response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"access_token\");",
									"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
									"});",
									"",
									"",
									"pm.test(\"Check for message in response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.equal(\"Login successful\");",
									"});",
									"",
									"",
									"pm.test(\"Check for status in response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\");",
									"    pm.expect(jsonData.status).to.equal(\"success\");",
									"",
									"",
									"    pm.environment.set(\"access_token\", jsonData.access_token);",
									"})",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('baseUrl', 'http://127.0.0.1:5001');",
									"pm.environment.set('email', 'ciril@gmail.com');",
									"pm.environment.set('password', 'ciril');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{email}}",
									"description": "(Required) The username of the user"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"description": "(Required) The password of the user"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": [
						{
							"name": "Login successful",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "<string>",
											"description": "(Required) The username of the user"
										},
										{
											"key": "password",
											"value": "<string>",
											"description": "(Required) The password of the user"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"access_token\": \"<string>\",\n  \"message\": \"<string>\",\n  \"status\": \"<string>\"\n}"
						},
						{
							"name": "Invalid credentials or missing parameters",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "<string>",
											"description": "(Required) The username of the user"
										},
										{
											"key": "password",
											"value": "<string>",
											"description": "(Required) The password of the user"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"status\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "<string>",
											"description": "(Required) The username of the user"
										},
										{
											"key": "password",
											"value": "<string>",
											"description": "(Required) The password of the user"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"status\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Login user and generate JWT token Copy Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 or 403\", function () {",
									"    pm.response.to.have.status.oneOf([401, 403]);",
									"});",
									"",
									"",
									"pm.test(\"Response should be JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"",
									"pm.test(\"Check for error message in response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.equal(\"Username and password are required\");",
									"});",
									"",
									"",
									"pm.test(\"Check for status in response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\");",
									"    pm.expect(jsonData.status).to.equal(\"error\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('email', 'satya@gmail.com');",
									"pm.environment.set('password', 'invalid_password');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "{{email}}",
									"description": "(Required) The username of the user"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"description": "(Required) The password of the user"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": [
						{
							"name": "Login successful",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "<string>",
											"description": "(Required) The username of the user"
										},
										{
											"key": "password",
											"value": "<string>",
											"description": "(Required) The password of the user"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"access_token\": \"<string>\",\n  \"message\": \"<string>\",\n  \"status\": \"<string>\"\n}"
						},
						{
							"name": "Invalid credentials or missing parameters",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "<string>",
											"description": "(Required) The username of the user"
										},
										{
											"key": "password",
											"value": "<string>",
											"description": "(Required) The password of the user"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"status\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "<string>",
											"description": "(Required) The username of the user"
										},
										{
											"key": "password",
											"value": "<string>",
											"description": "(Required) The password of the user"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"status\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "courses",
			"item": [
				{
					"name": "Retrieve all courses",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: \"Authorization\",",
									"    value: \"Bearer \" + pm.environment.get(\"access_token\")",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response should be JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response should contain courses array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"courses\");",
									"    pm.expect(jsonData.courses).to.be.an(\"array\");",
									"});",
									"",
									"",
									"pm.test(\"Each course should have course_id and course_name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.courses).to.be.an(\"array\").that.is.not.empty;",
									"",
									"",
									"    jsonData.courses.forEach(function(course) {",
									"        pm.expect(course).to.have.property(\"course_id\").that.is.a(\"number\");",
									"        pm.expect(course).to.have.property(\"course_name\").that.is.a(\"string\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/courses",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"courses"
							]
						},
						"description": "Get a list of all courses."
					},
					"response": [
						{
							"name": "A list of courses",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/courses",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"courses"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"courses\": [\n    {\n      \"course_id\": \"<integer>\",\n      \"course_name\": \"<string>\"\n    },\n    {\n      \"course_id\": \"<integer>\",\n      \"course_name\": \"<string>\"\n    }\n  ]\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/courses",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"courses"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"status\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "course",
			"item": [
				{
					"name": "{course_id}",
					"item": [
						{
							"name": "{parameter}",
							"item": [
								{
									"name": "Get course detail by parameter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({",
													"    key: \"Authorization\",",
													"    value: \"Bearer \" + pm.environment.get(\"access_token\")",
													"});",
													"",
													"pm.environment.set('course_id', 1);",
													"pm.environment.set('parameter','general_instruction');",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"  pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 300ms\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(300);",
													"});",
													"",
													"",
													"pm.test(\"General_instruction field exists in the response\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.general_instruction).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"General instruction is a non-empty string\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData).to.be.an('object');",
													"  pm.expect(responseData.general_instruction).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Content-Type header is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{baseUrl}}/course/{{course_id}}/{{parameter}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"course",
												"{{course_id}}",
												"{{parameter}}"
											]
										},
										"description": "Retrieve specific course detail based on the parameter."
									},
									"response": [
										{
											"name": "Course detail retrieved successfully",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/course/:course_id/:parameter",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"course",
														":course_id",
														":parameter"
													],
													"variable": [
														{
															"key": "course_id"
														},
														{
															"key": "parameter"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": \"<string>\"\n}"
										},
										{
											"name": "Invalid parameter",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/course/:course_id/:parameter",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"course",
														":course_id",
														":parameter"
													],
													"variable": [
														{
															"key": "course_id"
														},
														{
															"key": "parameter"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"status\": \"<string>\"\n}"
										},
										{
											"name": "Course not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/course/:course_id/:parameter",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"course",
														":course_id",
														":parameter"
													],
													"variable": [
														{
															"key": "course_id"
														},
														{
															"key": "parameter"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"status\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "week",
							"item": [
								{
									"name": "{week}",
									"item": [
										{
											"name": "demo",
											"item": [
												{
													"name": "Get weekly demo",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.request.headers.add({",
																	"    key: \"Authorization\",",
																	"    value: \"Bearer \" + pm.environment.get(\"access_token\")",
																	"});",
																	"",
																	"pm.environment.set('week',1);",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"",
																	"pm.test(\"Response has the required fields - course_id, demo, and week\", function () {",
																	"    const responseData = pm.response.json();",
																	"",
																	"    pm.expect(responseData).to.be.an('object');",
																	"    pm.expect(responseData.course_id).to.exist;",
																	"    pm.expect(responseData.demo).to.exist;",
																	"    pm.expect(responseData.week).to.exist;",
																	"});",
																	"",
																	"",
																	"pm.test(\"Demo is a non-empty string\", function () {",
																	"  const responseData = pm.response.json();",
																	"  pm.expect(responseData.demo).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Demo should not be empty\");",
																	"});",
																	"",
																	"",
																	"pm.test(\"Week is a non-negative integer\", function () {",
																	"    const responseData = pm.response.json();",
																	"    ",
																	"    pm.expect(responseData).to.be.an('object');",
																	"    pm.expect(responseData.week).to.exist.and.to.be.a('number').and.to.satisfy((week) => {",
																	"        return week >= 0;",
																	"    }, \"Week must be a non-negative integer\");",
																	"});",
																	"pm.test(\"Demo is a valid URL\", function () {",
																	"    const responseData = pm.response.json();",
																	"    pm.expect(responseData.demo).to.match(/^http(s)?:\\/\\/.+/);",
																	"});",
																	"pm.test(\"Course_id is an integer\", function () {",
																	"    const responseData = pm.response.json();",
																	"    pm.expect(responseData.course_id).to.be.a('number', \"Course_id should be a number\");",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/course/{{course_id}}/week/{{week}}/demo",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"course",
																"{{course_id}}",
																"week",
																"{{week}}",
																"demo"
															]
														},
														"description": "Retrieve demo for a specific course and week."
													},
													"response": [
														{
															"name": "Demo retrieved successfully",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "<API Key>",
																		"description": "Added as a part of security scheme: apikey"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/course/:course_id/week/:week/demo",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"course",
																		":course_id",
																		"week",
																		":week",
																		"demo"
																	],
																	"variable": [
																		{
																			"key": "course_id"
																		},
																		{
																			"key": "week"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"course_id\": \"<integer>\",\n  \"week\": \"<integer>\",\n  \"demo\": \"<string>\"\n}"
														},
														{
															"name": "No demo found for the given course and week",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "<API Key>",
																		"description": "Added as a part of security scheme: apikey"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/course/:course_id/week/:week/demo",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"course",
																		":course_id",
																		"week",
																		":week",
																		"demo"
																	],
																	"variable": [
																		{
																			"key": "course_id"
																		},
																		{
																			"key": "week"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"status\": \"<string>\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "exam",
											"item": [
												{
													"name": "{grade}",
													"item": [
														{
															"name": "Get weekly exam questions",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"pm.request.headers.add({",
																			"    key: \"Authorization\",",
																			"    value: \"Bearer \" + pm.environment.get(\"access_token\")",
																			"});",
																			"",
																			"pm.environment.set('week',1);",
																			"pm.environment.set('grade', 1);",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"// Test to check if the response contains the correct course ID, exam ID, exam name, and questions with options",
																			"",
																			"pm.test(\"Response contains the correct course ID\", function () {",
																			"  pm.expect(pm.response.json()).to.have.property('course_id').that.is.a('number');",
																			"});",
																			"",
																			"pm.test(\"Response contains the correct exam ID\", function () {",
																			"  pm.expect(pm.response.json()).to.have.property('exam_id').that.is.a('number');",
																			"});",
																			"",
																			"pm.test(\"Response contains the correct exam name\", function () {",
																			"  pm.expect(pm.response.json()).to.have.property('exam_name').that.is.a('string');",
																			"});",
																			"",
																			"pm.test(\"Each question in the response has options\", function () {",
																			"  pm.response.json().questions.forEach(function(question) {",
																			"    pm.expect(question).to.have.property('options').that.is.an('array').and.not.empty;",
																			"  });",
																			"});",
																			"",
																			"pm.test(\"Response status code is 200\", function () {",
																			"  pm.response.to.have.status(200);",
																			"});",
																			"",
																			"",
																			"pm.test(\"Response content type is application/json\", function () {",
																			"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
																			"});",
																			"",
																			"",
																			"pm.test(\"Week field exists and is of type number\", function () {",
																			"    const responseData = pm.response.json();",
																			"    ",
																			"    pm.expect(responseData).to.have.property('week').that.is.a('number');",
																			"});",
																			"",
																			"",
																			"pm.test(\"Each question has a non-empty question_id, question_text, and options array\", function () {",
																			"    const responseData = pm.response.json();",
																			"    ",
																			"    pm.expect(responseData.questions).to.be.an('array');",
																			"    responseData.questions.forEach(function(question) {",
																			"        pm.expect(question.question_id).to.exist.and.to.be.a('number');",
																			"        pm.expect(question.question_text).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"question_text should not be empty\");",
																			"        pm.expect(question.options).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1, \"options array should not be empty\");",
																			"    });",
																			"});",
																			"",
																			"",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/course/{{course_id}}/week/{{week}}/exam/{{grade}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"course",
																		"{{course_id}}",
																		"week",
																		"{{week}}",
																		"exam",
																		"{{grade}}"
																	]
																},
																"description": "Retrieve exam questions for a specific course and week, including the grading status."
															},
															"response": [
																{
																	"name": "Exam questions retrieved successfully",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "<API Key>",
																				"description": "Added as a part of security scheme: apikey"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/course/:course_id/week/:week/exam/:grade",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"course",
																				":course_id",
																				"week",
																				":week",
																				"exam",
																				":grade"
																			],
																			"variable": [
																				{
																					"key": "course_id"
																				},
																				{
																					"key": "week"
																				},
																				{
																					"key": "grade"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"course_id\": \"<integer>\",\n  \"week\": \"<integer>\",\n  \"exam_id\": \"<integer>\",\n  \"exam_name\": \"<string>\",\n  \"exam_description\": \"<string>\",\n  \"exam_end_time\": \"<string>\",\n  \"questions\": [\n    {\n      \"question_id\": \"<integer>\",\n      \"question_text\": \"<string>\",\n      \"correct_answer_id\": \"<integer>\",\n      \"options\": [\n        {\n          \"option_id\": \"<integer>\",\n          \"option_text\": \"<string>\"\n        },\n        {\n          \"option_id\": \"<integer>\",\n          \"option_text\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"question_id\": \"<integer>\",\n      \"question_text\": \"<string>\",\n      \"correct_answer_id\": \"<integer>\",\n      \"options\": [\n        {\n          \"option_id\": \"<integer>\",\n          \"option_text\": \"<string>\"\n        },\n        {\n          \"option_id\": \"<integer>\",\n          \"option_text\": \"<string>\"\n        }\n      ]\n    }\n  ]\n}"
																},
																{
																	"name": "No exam found for the given course and week",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "<API Key>",
																				"description": "Added as a part of security scheme: apikey"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/course/:course_id/week/:week/exam/:grade",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"course",
																				":course_id",
																				"week",
																				":week",
																				"exam",
																				":grade"
																			],
																			"variable": [
																				{
																					"key": "course_id"
																				},
																				{
																					"key": "week"
																				},
																				{
																					"key": "grade"
																				}
																			]
																		}
																	},
																	"status": "Not Found",
																	"code": 404,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"status\": \"<string>\"\n}"
																}
															]
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "submit-answers",
			"item": [
				{
					"name": "Submit user answers and calculate score",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: \"Authorization\",",
									"    value: \"Bearer \" + pm.environment.get(\"access_token\")",
									"});",
									"",
									"pm.environment.set('course_id', 1);",
									"pm.environment.set('exam_id',1);",
									"pm.environment.set('question_id',1);",
									"pm.environment.set('selected_option_id',1);",
									"const requestBody = {",
									"    \"course_id\": 1,",
									"    \"exam_id\": 1,",
									"    \"user_answers\": [{",
									"        \"question_id\": 1,",
									"        \"selected_option_id\": 1",
									"    },",
									"    {",
									"        \"question_id\": 2,",
									"        \"selected_option_id\": 6",
									"    }]",
									"}; ",
									"const requestBodyString = JSON.stringify(requestBody); ",
									"pm.request.body.update(requestBodyString);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - score and percentage\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.have.property('percentage');",
									"  pm.expect(responseData).to.have.property('score');",
									"});",
									"",
									"",
									"pm.test(\"Score <= 100\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.score).to.be.below(101);",
									"});",
									"",
									"",
									"pm.test(\"Verify the presence of Content-Type header\", function () {",
									"    pm.response.to.have.header('Content-Type');",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/submit-answers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"submit-answers"
							]
						},
						"description": "Submit user answers for an exam, calculate the score, and save the results."
					},
					"response": [
						{
							"name": "User answers submitted successfully and score calculated",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"course_id\": \"<integer>\",\n  \"exam_id\": \"<integer>\",\n  \"user_answers\": [\n    {\n      \"question_id\": \"<integer>\",\n      \"selected_option_id\": \"<integer>\"\n    },\n    {\n      \"question_id\": \"<integer>\",\n      \"selected_option_id\": \"<integer>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/submit-answers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"submit-answers"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"score\": \"<integer>\",\n  \"percentage\": \"<float>\"\n}"
						},
						{
							"name": "Bad request, missing required fields or invalid data",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"course_id\": \"<integer>\",\n  \"exam_id\": \"<integer>\",\n  \"user_answers\": [\n    {\n      \"question_id\": \"<integer>\",\n      \"selected_option_id\": \"<integer>\"\n    },\n    {\n      \"question_id\": \"<integer>\",\n      \"selected_option_id\": \"<integer>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/submit-answers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"submit-answers"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"status\": \"<string>\"\n}"
						},
						{
							"name": "Unauthorized, authentication required",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"course_id\": \"<integer>\",\n  \"exam_id\": \"<integer>\",\n  \"user_answers\": [\n    {\n      \"question_id\": \"<integer>\",\n      \"selected_option_id\": \"<integer>\"\n    },\n    {\n      \"question_id\": \"<integer>\",\n      \"selected_option_id\": \"<integer>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/submit-answers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"submit-answers"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"status\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"course_id\": \"<integer>\",\n  \"exam_id\": \"<integer>\",\n  \"user_answers\": [\n    {\n      \"question_id\": \"<integer>\",\n      \"selected_option_id\": \"<integer>\"\n    },\n    {\n      \"question_id\": \"<integer>\",\n      \"selected_option_id\": \"<integer>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/submit-answers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"submit-answers"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"status\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "usergrades",
			"item": [
				{
					"name": "Get the latest exam results for each exam for the authenticated user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: \"Authorization\",",
									"    value: \"Bearer \" + pm.environment.get(\"access_token\")",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Grades array should exist in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.grades).to.exist.and.to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Verify each 'exam_id' is a number and 'percentage' is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.grades).to.be.an('array');",
									"    ",
									"    responseData.grades.forEach(function(grade) {",
									"        pm.expect(grade.exam_id).to.be.a('number');",
									"        pm.expect(grade.percentage).to.be.a('number').and.to.be.at.least(0, \"percentage should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Exam name and score fields are present and non-empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  ",
									"  responseData.grades.forEach(function(grade) {",
									"    pm.expect(grade.exam_name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Exam name should not be empty\");",
									"    pm.expect(grade.score).to.exist.and.to.be.a('number');",
									"  });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/usergrades",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usergrades"
							]
						},
						"description": "Retrieve the latest exam results for each exam for the authenticated user."
					},
					"response": [
						{
							"name": "Latest exam results retrieved successfully",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usergrades",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usergrades"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"grades\": [\n    {\n      \"exam_id\": \"<integer>\",\n      \"exam_name\": \"<string>\",\n      \"score\": \"<float>\",\n      \"percentage\": \"<float>\"\n    },\n    {\n      \"exam_id\": \"<integer>\",\n      \"exam_name\": \"<string>\",\n      \"score\": \"<float>\",\n      \"percentage\": \"<float>\"\n    }\n  ]\n}"
						},
						{
							"name": "No exam results found for the user or user not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usergrades",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usergrades"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"status\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usergrades",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usergrades"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"status\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "submit-code",
			"item": [
				{
					"name": "Submit user code for evaluation assignment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: \"Authorization\",",
									"    value: \"Bearer \" + pm.environment.get(\"access_token\")",
									"});",
									"pm.environment.set(\"code\", `\"print('8')\"`)",
									"pm.environment.set(\"question_id\", 1)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the structure of the response schema\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.results).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.results.forEach(function(result) {",
									"        pm.expect(result).to.have.property('actual_output');",
									"        pm.expect(result).to.have.property('expected_output');",
									"        pm.expect(result).to.have.property('input').that.is.an('object');",
									"        pm.expect(result).to.have.property('is_correct');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Input object contains keys 'a' and 'b'\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.results).to.be.an('array');",
									"    responseData.results.forEach(function (result) {",
									"        pm.expect(result.input).to.be.an('object');",
									"        pm.expect(result.input).to.have.property('a');",
									"        pm.expect(result.input).to.have.property('b');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Is_correct is a boolean value\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.results).to.be.an('array');",
									"  responseData.results.forEach(function(result) {",
									"    pm.expect(result.is_correct).to.be.a('boolean');",
									"  });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"code\": {{code}},\n  \"question_id\": {{question_id}}\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/submit-code",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"submit-code"
							]
						},
						"description": "Allows users to submit their code for a specific question and get the evaluation results."
					},
					"response": [
						{
							"name": "Successfully submitted and evaluated the code",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"<string>\",\n  \"question_id\": \"<integer>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/submit-code",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"submit-code"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"results\": [\n    {\n      \"input\": {},\n      \"expected_output\": \"<string>\",\n      \"actual_output\": \"<string>\",\n      \"is_correct\": \"<boolean>\"\n    },\n    {\n      \"input\": {},\n      \"expected_output\": \"<string>\",\n      \"actual_output\": \"<string>\",\n      \"is_correct\": \"<boolean>\"\n    }\n  ]\n}"
						},
						{
							"name": "Missing code or question_id in the request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"<string>\",\n  \"question_id\": \"<integer>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/submit-code",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"submit-code"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Question ID not found or no options for the given question",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"<string>\",\n  \"question_id\": \"<integer>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/submit-code",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"submit-code"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Error executing user code",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"<string>\",\n  \"question_id\": \"<integer>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/submit-code",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"submit-code"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"traceback\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "user-assignment-result",
			"item": [
				{
					"name": "Retrieve all assignment results for the authenticated user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the schema of the response - exam_id, id, question_id, result_json, user_id\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('exam_id');",
									"        pm.expect(item).to.have.property('id');",
									"        pm.expect(item).to.have.property('question_id');",
									"        pm.expect(item).to.have.property('result_json');",
									"        pm.expect(item).to.have.property('user_id');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Verify that the response contains non-empty values for id, user_id, question_id, exam_id, and result_json\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (result) {",
									"        pm.expect(result.id).to.exist.and.to.be.a('number');",
									"        pm.expect(result.user_id).to.exist.and.to.be.a('number');",
									"        pm.expect(result.question_id).to.exist.and.to.be.a('number');",
									"        pm.expect(result.exam_id).to.exist.and.to.be.a('number');",
									"        pm.expect(result.result_json).to.exist.and.to.not.be.empty;",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: \"Authorization\",",
									"    value: \"Bearer \" + pm.environment.get(\"access_token\")",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user-assignment-result",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user-assignment-result"
							]
						},
						"description": "Fetches all assignment results for the currently authenticated user."
					},
					"response": [
						{
							"name": "Successfully retrieved user assignment results",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user-assignment-result",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user-assignment-result"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": \"<integer>\",\n    \"user_id\": \"<integer>\",\n    \"question_id\": \"<integer>\",\n    \"exam_id\": \"<integer>\",\n    \"result_json\": \"<string>\"\n  },\n  {\n    \"id\": \"<integer>\",\n    \"user_id\": \"<integer>\",\n    \"question_id\": \"<integer>\",\n    \"exam_id\": \"<integer>\",\n    \"result_json\": \"<string>\"\n  }\n]"
						},
						{
							"name": "User not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user-assignment-result",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user-assignment-result"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user-assignment-result",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user-assignment-result"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"traceback\": \"<string>\"\n}"
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "/"
		}
	]
}